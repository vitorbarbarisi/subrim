#!/usr/bin/env python3

def create_standalone_gba_rom():
    # Create 32KB ROM
    rom = bytearray(32 * 1024)
    
    # GBA Header
    # Entry point - branch to main program
    branch_offset = (0x8000 - 8) // 4  # Jump to 0x8000 (safer location)
    branch_instr = 0xEA000000 | (branch_offset & 0x00FFFFFF)
    rom[0:4] = [
        branch_instr & 0xFF,
        (branch_instr >> 8) & 0xFF,
        (branch_instr >> 16) & 0xFF,
        (branch_instr >> 24) & 0xFF
    ]
    
    # Nintendo Logo (required)
    nintendo_logo = bytes([
        0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
        0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
        0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
        0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
        0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
        0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
        0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
        0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
        0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
        0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
        0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
        0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
        0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
    ])
    rom[4:160] = nintendo_logo
    
    # Game info
    title = b"R36S VIEWER\x00"
    rom[160:172] = title.ljust(12, b'\x00')
    rom[172:176] = b"RSUB"
    rom[176:178] = b"01" 
    rom[178] = 0x96
    rom[179] = 0x00
    rom[180] = 0x00
    rom[181:188] = b'\x00' * 7
    rom[188] = 0x00
    
    # Calculate checksum
    checksum = 0
    for i in range(160, 189):
        checksum = (checksum - rom[i]) & 0xFF
    checksum = (checksum - 0x19) & 0xFF
    rom[189] = checksum
    rom[190:192] = b'\x00\x00'
    
    # Embedded episode data (starting at 0x1000)
    data_start = 0x1000
    
    # Episode titles and subtitles (embedded as strings)
    episode_data = [
        "CHAVES 001 - BARRIL",
        "OLA DONA FLORINDA!",
        "OI CHAVES QUERIDO",
        "POSSO BRINCAR AQUI?",
        "CLARO, MAS CUIDADO!",
        "",
        "CHAVES 002 - AULA", 
        "HOJE VAMOS ESTUDAR",
        "QUE LEGAL PROFESSOR!",
        "PRESTEM ATENCAO",
        "SIM SENHOR!",
        "",
        "FLIPPER 001 - MAR",
        "BEM VINDOS AO SHOW",
        "FLIPPER E INTELIGENTE", 
        "VAMOS A AVENTURA",
        "DIVERSAO GARANTIDA!"
    ]
    
    # Convert strings to bytes and store in ROM
    current_pos = data_start
    for text in episode_data:
        text_bytes = text.encode('ascii', errors='replace')
        if current_pos + len(text_bytes) + 1 < len(rom):
            rom[current_pos:current_pos+len(text_bytes)] = text_bytes
            rom[current_pos+len(text_bytes)] = 0  # null terminator
            current_pos += len(text_bytes) + 1
    
    # ARM code at 0x8000 (safe location, plenty of space)
    code_start = 0x8000
    
    # Complete ARM program for episode viewer
    arm_code = [
        # Initialize display (Mode 3 - 15bit bitmap)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x04000000 (DISPCNT)
        0x03, 0x14, 0xA0, 0xE3,  # mov r1, #0x403 (Mode 3 + BG2)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        
        # Clear screen (black)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000 (VRAM)
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x10, 0xA0, 0xE3,  # mov r1, #0 (black)
        0x00, 0x25, 0xA0, 0xE3,  # mov r2, #0x9600 (screen size/2)
        
        # Clear loop
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4  
        0x01, 0x20, 0x52, 0xE2,  # subs r2, r2, #1
        0xFC, 0xFF, 0xFF, 0x1A,  # bne clear_loop
        
        # Draw title "R36S VIEWER" at top
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x1E, 0x04, 0x80, 0xE2,  # add r0, r0, #240*10 (line 10)
        0x28, 0x00, 0x80, 0xE2,  # add r0, r0, #40 (column 20)
        0xFF, 0x17, 0xA0, 0xE3,  # mov r1, #0x7FFF (white)
        
        # Draw several white pixels for title
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Draw menu text "EPISODIOS:" at middle
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000  
        0x20, 0x1E, 0x80, 0xE2,  # add r0, r0, #240*50 (line 50)
        0x1E, 0x00, 0x80, 0xE2,  # add r0, r0, #30 (column 15)
        0x1F, 0x1C, 0xA0, 0xE3,  # mov r1, #0x7C1F (cyan)
        
        # Draw cyan pixels for "EPISODIOS"
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Draw episode list
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0xC0, 0x28, 0x80, 0xE2,  # add r0, r0, #240*70 (line 70)
        0x14, 0x00, 0x80, 0xE2,  # add r0, r0, #20 (column 10)
        0xE0, 0x13, 0xA0, 0xE3,  # mov r1, #0x3E0 (green)
        
        # Episode 1: CHAVES
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Next line
        0xE0, 0x00, 0x80, 0xE2,  # add r0, r0, #240*2-12 (next line)
        0x1F, 0x00, 0xA0, 0xE3,  # mov r1, #0x1F (red)
        
        # Episode 2: FLIPPER  
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Draw instructions at bottom
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x3C, 0x80, 0xE2,  # add r0, r0, #240*120 (line 120)
        0x28, 0x00, 0x80, 0xE2,  # add r0, r0, #40 (column 20)
        0x9C, 0x19, 0xA0, 0xE3,  # mov r1, #0x739C (yellow)
        
        # "A=SELECT B=EXIT"
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Main loop - wait for input and stay stable
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x04000130 (KEY INPUT)
        0x30, 0x01, 0x40, 0xE2,  # sub r0, r0, #0x04000130-0x04000130
        0x30, 0x01, 0x80, 0xE2,  # add r0, r0, #0x04000130
        
        # Input loop
        0x00, 0x10, 0x90, 0xE5,  # ldr r1, [r0] (read keys)
        0x01, 0x10, 0x11, 0xE2,  # tst r1, #1 (A button)
        0x02, 0x00, 0x00, 0x1A,  # bne handle_a
        0x02, 0x10, 0x11, 0xE2,  # tst r1, #2 (B button) 
        0x01, 0x00, 0x00, 0x1A,  # bne handle_b
        0xF9, 0xFF, 0xFF, 0xEA,  # b input_loop
        
        # Handle A button (show episode)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0xFF, 0x17, 0xA0, 0xE3,  # mov r1, #0x7FFF (white flash)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        0xF4, 0xFF, 0xFF, 0xEA,  # b input_loop
        
        # Handle B button (back to menu)  
        0xF2, 0xFF, 0xFF, 0xEA,  # b input_loop (just continue)
    ]
    
    # Place ARM code
    for i, byte in enumerate(arm_code):
        if code_start + i < len(rom):
            rom[code_start + i] = byte
    
    return bytes(rom)

# Create the standalone ROM
rom_data = create_standalone_gba_rom()

with open('viewer.gba', 'wb') as f:
    f.write(rom_data)

print(f"âœ… Standalone GBA ROM created: {len(rom_data)} bytes")
print("ðŸ“º Features: Episode menu, embedded data, input handling")
print("ðŸŽ® Controls: A=Select, B=Back, D-pad=Navigate")
