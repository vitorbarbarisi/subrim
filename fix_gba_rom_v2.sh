#!/bin/bash

echo "=== GBA ROM v2 - Mais Robusto ==="

cd r36s_viewer_gba

cat > create_stable_gba.py << 'PYTHON_EOF'
#!/usr/bin/env python3

def create_stable_gba_rom():
    # Create 32KB ROM
    rom = bytearray(32 * 1024)
    
    # GBA Header exactly as real games
    
    # Entry point - proper ARM branch
    # Branch to 0x08000000 + 0x200 (skip header + some padding)
    branch_offset = (0x200 - 8) // 4  # ARM branch calculation
    branch_instr = 0xEA000000 | (branch_offset & 0x00FFFFFF)
    rom[0:4] = [
        branch_instr & 0xFF,
        (branch_instr >> 8) & 0xFF,
        (branch_instr >> 16) & 0xFF,
        (branch_instr >> 24) & 0xFF
    ]
    
    # Complete Nintendo Logo (exactly as official)
    nintendo_logo = bytes([
        0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
        0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
        0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
        0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
        0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
        0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
        0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
        0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
        0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
        0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
        0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
        0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
        0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
    ])
    rom[4:160] = nintendo_logo
    
    # Game info
    title = b"R36S VIEWER\x00"
    rom[160:172] = title.ljust(12, b'\x00')
    rom[172:176] = b"RSUB"  # Game code
    rom[176:178] = b"01"    # Maker code
    rom[178] = 0x96         # Fixed value
    rom[179] = 0x00         # Unit code
    rom[180] = 0x00         # Device type
    rom[181:188] = b'\x00' * 7  # Reserved
    rom[188] = 0x00         # Software version
    
    # Calculate header checksum
    checksum = 0
    for i in range(160, 189):
        checksum = (checksum - rom[i]) & 0xFF
    checksum = (checksum - 0x19) & 0xFF
    rom[189] = checksum
    rom[190:192] = b'\x00\x00'
    
    # ARM code at 0x200 (safer location)
    code_start = 0x200
    
    # Super simple ARM code that just sets video mode and infinite loop
    arm_code = [
        # ARM mode instructions (32-bit each)
        # Set DISPCNT to Mode 3 (15-bit color bitmap)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x04000000
        0x03, 0x10, 0xA0, 0xE3,  # mov r1, #0x403 (Mode 3 + BG2)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        
        # Set a few pixels to show it's working
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000 (VRAM)
        0x00, 0x00, 0x40, 0xE2,  # sub r0, r0, #0 (actually just nop)
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x1F, 0x1C, 0xA0, 0xE3,  # mov r1, #0x7C1F (bright magenta)
        
        # Write some pixels
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        
        # Infinite loop
        0xFE, 0xFF, 0xFF, 0xEA,  # b infinite_loop (branch to self)
    ]
    
    # Place ARM code
    for i, byte in enumerate(arm_code):
        if code_start + i < len(rom):
            rom[code_start + i] = byte
    
    return bytes(rom)

# Create ROM
rom_data = create_stable_gba_rom()

with open('viewer.gba', 'wb') as f:
    f.write(rom_data)

print(f"✅ Stable GBA ROM v2 created: {len(rom_data)} bytes")
print("This ROM uses pure ARM mode (not thumb) and should be more stable")
PYTHON_EOF

python3 create_stable_gba.py

if [ -f "viewer.gba" ]; then
    echo "✅ Stable GBA ROM v2 created!"
    echo "📊 ROM size: $(ls -lh viewer.gba | awk '{print $5}')"
    cd ..
    echo "🚀 Deploy with: sudo ./deploy_gba_direct.sh"
else
    echo "❌ Failed to create stable ROM"
    cd ..
fi
