#!/bin/bash

echo "=== GBA ROM com Bem-vindo e Loader ==="

cd r36s_viewer_gba

cat > create_welcome_gba.py << 'PYTHON_EOF'
#!/usr/bin/env python3

def create_welcome_gba_rom():
    # Create 32KB ROM
    rom = bytearray(32 * 1024)
    
    # GBA Header
    branch_offset = (0x8000 - 8) // 4
    branch_instr = 0xEA000000 | (branch_offset & 0x00FFFFFF)
    rom[0:4] = [
        branch_instr & 0xFF,
        (branch_instr >> 8) & 0xFF,
        (branch_instr >> 16) & 0xFF,
        (branch_instr >> 24) & 0xFF
    ]
    
    # Nintendo Logo
    nintendo_logo = bytes([
        0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
        0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
        0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
        0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
        0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
        0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
        0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
        0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
        0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
        0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
        0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
        0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
        0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
    ])
    rom[4:160] = nintendo_logo
    
    # Game info
    title = b"R36S VIEWER\x00"
    rom[160:172] = title.ljust(12, b'\x00')
    rom[172:176] = b"RSUB"
    rom[176:178] = b"01"
    rom[178] = 0x96
    rom[179] = 0x00
    rom[180] = 0x00
    rom[181:188] = b'\x00' * 7
    rom[188] = 0x00
    
    # Calculate checksum
    checksum = 0
    for i in range(160, 189):
        checksum = (checksum - rom[i]) & 0xFF
    checksum = (checksum - 0x19) & 0xFF
    rom[189] = checksum
    rom[190:192] = b'\x00\x00'
    
    # ARM code at 0x8000
    code_start = 0x8000
    
    # ARM program with welcome screen and loader animation
    arm_code = [
        # Initialize display (Mode 3)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x04000000
        0x03, 0x14, 0xA0, 0xE3,  # mov r1, #0x403
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        
        # Clear screen to dark blue
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x10, 0x10, 0xA0, 0xE3,  # mov r1, #0x10 (dark blue)
        0x00, 0x25, 0xA0, 0xE3,  # mov r2, #0x9600 (screen pixels/2)
        
        # Clear screen loop
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x01, 0x20, 0x52, 0xE2,  # subs r2, r2, #1
        0xFD, 0xFF, 0xFF, 0x1A,  # bne clear_loop
        
        # === WELCOME SCREEN ===
        # Draw "BEM-VINDO" (simplified as colored blocks)
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x80, 0x19, 0x80, 0xE2,  # add r0, r0, #240*40 (line 40)
        0x3C, 0x00, 0x80, 0xE2,  # add r0, r0, #60 (column 30)
        
        # B (white block)
        0xFF, 0x17, 0xA0, 0xE3,  # mov r1, #0x7FFF (white)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4 (space)
        
        # E (yellow block)
        0x1F, 0x1F, 0xA0, 0xE3,  # mov r1, #0x7FE0 (yellow)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # M (green block)
        0xE0, 0x13, 0xA0, 0xE3,  # mov r1, #0x3E0 (green)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # - (cyan)
        0x1F, 0x1C, 0xA0, 0xE3,  # mov r1, #0x7C1F (cyan)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # Next line for "VINDO"
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x40, 0x1C, 0x80, 0xE2,  # add r0, r0, #240*50 (line 50)
        0x3C, 0x00, 0x80, 0xE2,  # add r0, r0, #60
        
        # V (red)
        0x1F, 0x00, 0xA0, 0xE3,  # mov r1, #0x1F (red)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # I (magenta)
        0x1F, 0x14, 0xA0, 0xE3,  # mov r1, #0x501F (magenta)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # N (orange-ish)
        0x3F, 0x15, 0xA0, 0xE3,  # mov r1, #0x543F (orange)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # D (blue)
        0xE0, 0x18, 0xA0, 0xE3,  # mov r1, #0x63E0 (blue)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        
        # O (purple)
        0x1F, 0x18, 0xA0, 0xE3,  # mov r1, #0x601F (purple)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Wait delay for welcome screen
        0x00, 0x30, 0xA0, 0xE3,  # mov r3, #0x100000 (delay counter)
        0x01, 0x30, 0x53, 0xE2,  # subs r3, r3, #1
        0xFE, 0xFF, 0xFF, 0x1A,  # bne delay_loop
        
        # === LOADER ANIMATION ===
        # Clear screen again for loader
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x10, 0xA0, 0xE3,  # mov r1, #0 (black)
        0x00, 0x25, 0xA0, 0xE3,  # mov r2, #0x9600
        
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x01, 0x20, 0x52, 0xE2,  # subs r2, r2, #1
        0xFD, 0xFF, 0xFF, 0x1A,  # bne clear_loop2
        
        # Draw "CARREGANDO..." 
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x80, 0x19, 0x80, 0xE2,  # add r0, r0, #240*40
        0x28, 0x00, 0x80, 0xE2,  # add r0, r0, #40
        0x1F, 0x1F, 0xA0, 0xE3,  # mov r1, #0x7FE0 (yellow)
        
        # Draw "CARREGANDO" as blocks
        0x00, 0x10, 0x80, 0xE5,  # C
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # A
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # R
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # R
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # E
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # G
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # A
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # N
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # D
        0x04, 0x00, 0x80, 0xE2,  # add r0, r0, #4
        0x00, 0x10, 0x80, 0xE5,  # O
        
        # Progress bar animation
        0x00, 0x40, 0xA0, 0xE3,  # mov r4, #10 (progress steps)
        
        # Progress bar loop
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x20, 0x80, 0xE2,  # add r0, r0, #240*60 (progress bar line)
        0x1E, 0x00, 0x80, 0xE2,  # add r0, r0, #30 (start position)
        
        # Add one green block to progress bar
        0xE0, 0x13, 0xA0, 0xE3,  # mov r1, #0x3E0 (green)
        0x05, 0x20, 0xA0, 0xE3,  # mov r2, #5 (blocks per step)
        
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x01, 0x20, 0x52, 0xE2,  # subs r2, r2, #1
        0xFD, 0xFF, 0xFF, 0x1A,  # bne progress_block_loop
        
        # Delay between progress updates
        0x00, 0x50, 0xA0, 0xE3,  # mov r5, #0x50000 (delay)
        0x01, 0x50, 0x55, 0xE2,  # subs r5, r5, #1
        0xFE, 0xFF, 0xFF, 0x1A,  # bne progress_delay
        
        # Next progress step
        0x01, 0x40, 0x54, 0xE2,  # subs r4, r4, #1
        0xEB, 0xFF, 0xFF, 0x1A,  # bne progress_loop
        
        # === FINAL MENU ===
        # Clear for final menu
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x10, 0xA0, 0xE3,  # mov r1, #0
        0x00, 0x25, 0xA0, 0xE3,  # mov r2, #0x9600
        
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x01, 0x20, 0x52, 0xE2,  # subs r2, r2, #1
        0xFD, 0xFF, 0xFF, 0x1A,  # bne final_clear
        
        # Draw final menu: "CHAVES" and "FLIPPER"
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x80, 0x19, 0x80, 0xE2,  # add r0, r0, #240*40
        0x1E, 0x00, 0x80, 0xE2,  # add r0, r0, #30
        
        # "CHAVES" (green)
        0xE0, 0x13, 0xA0, 0xE3,  # mov r1, #0x3E0
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Next line for "FLIPPER"
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0x00, 0x1E, 0x80, 0xE2,  # add r0, r0, #240*60
        0x1E, 0x00, 0x80, 0xE2,  # add r0, r0, #30
        
        # "FLIPPER" (blue)
        0xE0, 0x18, 0xA0, 0xE3,  # mov r1, #0x63E0
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0], #4
        
        # Input handling loop
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x04000130
        0x30, 0x01, 0x40, 0xE2,  # sub r0, r0, #0
        0x30, 0x01, 0x80, 0xE2,  # add r0, r0, #0x04000130
        
        0x00, 0x10, 0x90, 0xE5,  # ldr r1, [r0]
        0x01, 0x10, 0x11, 0xE2,  # tst r1, #1 (A button)
        0x01, 0x00, 0x00, 0x1A,  # bne flash_screen
        0xFC, 0xFF, 0xFF, 0xEA,  # b input_loop
        
        # Flash screen white when A pressed
        0x00, 0x00, 0xA0, 0xE3,  # mov r0, #0x06000000
        0x00, 0x00, 0x60, 0xE2,  # add r0, r0, #0x06000000
        0xFF, 0x17, 0xA0, 0xE3,  # mov r1, #0x7FFF (white)
        0x00, 0x10, 0x80, 0xE5,  # str r1, [r0]
        0xF8, 0xFF, 0xFF, 0xEA,  # b input_loop
    ]
    
    # Place ARM code
    for i, byte in enumerate(arm_code):
        if code_start + i < len(rom):
            rom[code_start + i] = byte
    
    return bytes(rom)

# Create the welcome ROM
rom_data = create_welcome_gba_rom()

with open('viewer.gba', 'wb') as f:
    f.write(rom_data)

print(f"✅ Welcome GBA ROM created: {len(rom_data)} bytes")
print("�� Features:")
print("   - Welcome screen: 'BEM-VINDO' colorido")
print("   - Loader animation: 'CARREGANDO...' com barra de progresso")
print("   - Menu final: CHAVES (verde) e FLIPPER (azul)")
print("   - Input: A=Flash branco, visual feedback")
PYTHON_EOF

python3 create_welcome_gba.py

if [ -f "viewer.gba" ]; then
    echo "✅ Welcome GBA ROM criado com sucesso!"
    echo "📺 Sequência:"
    echo "   1. Tela 'BEM-VINDO' (colorida)"
    echo "   2. 'CARREGANDO...' com barra verde"
    echo "   3. Menu com CHAVES e FLIPPER"
    echo "   4. Botão A = flash branco"
    
    cd ..
    echo "🚀 Deploy: sudo ./deploy_gba_direct.sh"
else
    echo "❌ Falhou ao criar welcome ROM"
    cd ..
fi
